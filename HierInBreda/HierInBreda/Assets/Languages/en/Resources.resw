<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppbarButton.Label" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="AppbarButtonLabel" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="BackButton" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CancelText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="InfoButton.Label" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="InfoButtonLabel" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="LanguageSelectButton.Label" xml:space="preserve">
    <value>Change language</value>
  </data>
  <data name="Legenda.Header" xml:space="preserve">
    <value>Legend</value>
  </data>
  <data name="Legenda.OffContent" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="Legenda.OnContent" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="OffRoutePopup" xml:space="preserve">
    <value>You deviate from the route.</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="OkText" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="ShowTutorialButton.Text" xml:space="preserve">
    <value>Show tutorial</value>
  </data>
  <data name="SightsListHeader.Text" xml:space="preserve">
    <value>Sights</value>
  </data>
  <data name="TimeText" xml:space="preserve">
    <value>Time:  </value>
  </data>
  <data name="TutorialButton.Label" xml:space="preserve">
    <value>Tutorial</value>
  </data>
  <data name="TutorialButtonLabel" xml:space="preserve">
    <value>Tutorial</value>
  </data>
  <data name="TutorialPage1" xml:space="preserve">
    <value>Welcome to the tutorial of "Hier in Breda"

In this tutorial, the following topics will be covered:
- The appearance of the application
- The map
- The menu bar
- The route
- The sights</value>
  </data>
  <data name="TutorialPage2" xml:space="preserve">
    <value>The appearance of the application

Before you, you can see the map. Above the map are three buttons. The left one (info) is for information of the sights (this is treated later at "sights"). The middle is as you already know the tutorial. The last one is to show the menu bar.</value>
  </data>
  <data name="TutorialPage3" xml:space="preserve">
    <value>The map

The map is a map of the centre of Breda, and he will show you where you are right now, shows the entire route and displays all the sights.</value>
  </data>
  <data name="TutorialPage4" xml:space="preserve">
    <value>The menu bar

The menu bar contains from top to bottom: 
- Legend (on / off) 
- List of sights
- Change language
- Connection - battery status - GPS
- The current local time</value>
  </data>
  <data name="TutorialPage5" xml:space="preserve">
    <value>The route

The route on the map is colored blue. The part of the route that has been walked by you will be colored gray.</value>
  </data>
  <data name="TutorialPage6" xml:space="preserve">
    <value>The sights

The sights are shown as green symbols on the map. If you are near a sight the symbol of the info button will change to a question mark. If you press it the information of sight will be displayed.</value>
  </data>
  <data name="TutorialPromptText" xml:space="preserve">
    <value>Would you like to follow the tutorial?</value>
  </data>
  <data name="unimplemented" xml:space="preserve">
    <value>This button is not implemented for this pilot</value>
  </data>
  <data name="UserPinText" xml:space="preserve">
    <value>You</value>
  </data>
  <data name="VVVWarning" xml:space="preserve">
    <value>Are you sure you want to go back to the vvv. With this action the tour will be aborted.</value>
  </data>
  <data name="Legend1.Text" xml:space="preserve">
    <value>Visited sight</value>
  </data>
  <data name="Legend11" xml:space="preserve">
    <value>Visited sight</value>
  </data>
  <data name="Legend2.Text" xml:space="preserve">
    <value>Unvisited sight</value>
  </data>
  <data name="Legend21" xml:space="preserve">
    <value>Unvisited sight</value>
  </data>
  <data name="Legend3.Text" xml:space="preserve">
    <value>Route</value>
  </data>
  <data name="Legend31" xml:space="preserve">
    <value>Route</value>
  </data>
</root>